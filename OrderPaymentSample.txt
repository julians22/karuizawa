$user = \App\Domains\Auth\Models\User::where('store_id', config('dummy.store'))->first()->id;

$order = \App\Models\Order::create([
    'customer_id' => config('dummy.customer'),
    'store_id' => config('dummy.store'),
    'user_id' => $user,
    'total_price' => 0,
    'status' => 'pending',
]);

$product = \App\Models\Product::where('daily_stock', '>', 0)->first();
$orderItem1 = new \App\Models\OrderItem([
    'quantity' => 2,
    'price' => $product->price ?? 200000,
]);
$orderItem1->product()->associate($product);
$order->orderItems()->save($orderItem1);

$semiCustomProduct = \App\Models\SemiCustomProduct::create([
    'name' => 'Custom Shirt',
    'code' => 'CS001',
    'customer_id' => config('dummy.customer'),
    'details' => json_encode([
        'collar' => 'Spread',
        'cuff' => 'French',
        'body_model_front' => 'Slim',
        'body_model_back' => 'Regular',
        'pocket' => 'Single',
        'hem' => 'Round',
        'button' => 'Pearl',
        'size' => 'M',
    ]),
]);

$orderItem2 = new \App\Models\OrderItem([
    'quantity' => 1,
    'price' => 1500000,
]);

$orderItem2->product()->associate($semiCustomProduct);
$order->orderItems()->save($orderItem2);

$totalPrice = $order->orderItems->sum(function ($orderItem) {
    return $orderItem->quantity * $orderItem->price;
});
$order->update(['total_price' => $totalPrice]);

<!-- payment -->
$downPayment = \App\Models\Payment::create([
    'order_id' => $order->id,
    'user_id' => $user,
    'amount' => 500000,
    'is_downpayment' => true
]);

// Step 6: Create a Completion Payment
$completionPayment = \App\Models\Payment::create([
    'order_id' => $order->id,
    'user_id' => $user,
    'amount' => 1000000,
    'is_downpayment' => false
]);

// Step 7: Update the Order Status
$order->update(['status' => 'completed']);

